# To switch traffic from blue to green:
# Update the ingress.yaml as below to point to the green service.

# ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: green
spec:
  rules:
  - host: myapp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: green-service
            port:
              number: 80


# first steps: setup vm, do kubectl get nodes, 
then kubectl create namespace green and for blue, 
then u create deployments for blue and green versions of app, 
then apply using kubectl apply -f blue-deployment.yaml and for green similarly, 
kubectl apply -k ./ - version will he changed
kubectl get all --namespaces hotel - see pods, services, replica sets, deployments
refresh browser

modify replica of green from 0 to 3. 3 of each will run
git status, git add . git commit -m "v1.1" , ls -lth
kubectl apply -k ./
3 will run for each now
delete rs of idle green dep, whre shows 0, kubectl get rs --namespace hotel
kubectl delete rs hotwl-green-340idd --namespace hotel
kubectl get rs --namespace hotel
kubectl get all --namespaces hotel
refresh browser

now go change servicestable.yaml from blue to green
git status, git add and commit -m "v1.1"
k apply -k ./
kubectl get all --namespaces hotel
refresh browser

bug found- change servicestable.yaml from green back to blue. modify deploymentblue.yaml replica 0 to 3, depgree from 3 to 0
git add, commit, push, k apply -f ./
now prod version web shud point to 1.0
this way we can deploy new vesion, and rollback without downtime

then configure service and ingress, 
then at the end, update ingress file to switch traffic between blue and green, 
then apply ingress - kubectl apply -f ingress.yaml so when u do this traffic will be switched to green ans vice versa

